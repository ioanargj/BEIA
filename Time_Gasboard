/*  
 *  ------ [Ga_v30_11] LPG Sensor reading for v30  -------- 
 *  
 *  Explanation: Turn on the Gases Board v30 and read the LPG
 *  sensor every five seconds, printing the result through the USB
 *  
 *  Copyright (C) 2016 Libelium Comunicaciones Distribuidas S.L. 
 *  http://www.libelium.com 
 *  
 *  This program is free software: you can redistribute it and/or modify  
 *  it under the terms of the GNU General Public License as published by  
 *  the Free Software Foundation, either version 3 of the License, or  
 *  (at your option) any later version.  
 *   
 *  This program is distributed in the hope that it will be useful,  
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of  
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 *  GNU General Public License for more details.  
 *   
 *  You should have received a copy of the GNU General Public License  
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 *  
 *  Version:           3.0
 *  Design:            David Gascón 
 *  Implementation:    Ahmad Saad
 */

// Library include
#include <WaspSensorGas_v30.h>
#include <WaspFrame.h>
#include <WaspWIFI_PRO.h> 




// choose socket (SELECT USER'S SOCKET)
///////////////////////////////////////
uint8_t socket = SOCKET0;
///////////////////////////////////////
char filename[]="FILE2.TXT";
char SERVER1[] = "ro.pool.ntp.org";
char SERVER2[] = "wwv.nist.gov";
uint8_t sd_answer;

// Define Time Zone from -12 to 12 (i.e. GMT+2)
///////////////////////////////////////
uint8_t time_zone = 3;
// choose URL settings
///////////////////////////////////////
char type[] = "http";
char host[] = "82.78.81.171";
char port[] = "80";
///////////////////////////////////////
uint8_t error;
uint8_t status;
unsigned long previous;

// LPG Sensor can be connected in SOCKET6 or SOCKET7
VOCSensorClass VOCSensor(SOCKET_5);
LPGSensorClass LPGSensor(SOCKET_7);



// Concentratios used in calibration process (PPM VALUE)
#define POINT1_PPM_LPG 10.0   //  <-- Normal concentration in air
#define POINT2_PPM_LPG 50.0   
#define POINT3_PPM_LPG 100.0
  
// Calibration voltages obtained during calibration process (in KOHMs)
#define POINT1_RES_LPG 45.25  // <-- Rs at normal concentration in air
#define POINT2_RES_LPG 25.50
#define POINT3_RES_LPG 3.55

// Concentratios used in calibration process
#define POINT1_PPM_VOC 100.0   //  <--- Ro value at this concentration
#define POINT2_PPM_VOC 300.0
#define POINT3_PPM_VOC 1000.0
// Calibration resistances obtained during calibration process
#define POINT1_RES_VOC 230.30 // <-- Ro Resistance at 100 ppm. Necessary value.
#define POINT2_RES_VOC 40.665 // 
#define POINT3_RES_VOC 20.300 // 
  
// Define the number of calibration points
#define numPoints 3
//S8
float temperature; // Stores the temperature in ºC
float humidity;     // Stores the realitve humidity in %RH
float pressure;    
//S5
float VOCconcentrations[] = {POINT1_PPM_VOC, POINT2_PPM_VOC, POINT3_PPM_VOC};
float VOCresValues[] =      {POINT1_RES_VOC, POINT2_RES_VOC, POINT3_RES_VOC};
//S7  
float concentrations[] = {POINT1_PPM_LPG, POINT2_PPM_LPG, POINT3_PPM_LPG};
float resValues[] =      {POINT1_RES_LPG, POINT2_RES_LPG, POINT3_RES_LPG};

char node_ID[] = "Gas_WiFi3";

void setup() 
{

  SD.ON();
  sd_answer = SD.create(filename);
  //USB.println(F("RTC_1 example"));

  // Powers RTC up, init I2C bus and read initial values
  //USB.println(F("Init RTC"));
  //RTC.ON();
  
  // Setting time [yy:mm:dd:dow:hh:mm:ss]
  //RTC.setTime("18:07:31:03:10:14:00");
  //USB.print(F("Setting time: "));
  //USB.println(F("18:07:31:03:10:14:00"));
  // Configure the USB port
  USB.ON();
  USB.println(F("Start program"));  
  USB.println(F("***************************************"));  
  USB.println(F("Once the module is set with one or more"));
  USB.println(F("AP settings, it attempts to join the AP"));
  USB.println(F("automatically once it is powered on"));    
  USB.println(F("Refer to example 'WIFI_PRO_01' to configure"));  
  USB.println(F("the WiFi module with proper settings"));
  USB.println(F("***************************************"));
  // Calculate the slope and the intersection of the logarithmic function
  VOCSensor.setCalibrationPoints(VOCresValues, VOCconcentrations, numPoints);
  LPGSensor.setCalibrationPoints(resValues, concentrations, numPoints);

  ///////////////////////////////////////////
  // 1. Turn on the board and the SOCKET
  /////////////////////////////////////////// 
  
  // Switch ON and configure the Gases Board
  Gases.ON();  
    delay(100); 
  // Switch ON the sensor socket
  VOCSensor.ON();
  LPGSensor.ON();

  error = WIFI_PRO.ON(socket);

  if (error == 0)
  {    
    USB.println(F("1. WiFi switched ON"));
  }
  else
  {
    USB.println(F("1. WiFi did not initialize correctly"));
  }


  //////////////////////////////////////////////////
  // 2. Check if connected
  //////////////////////////////////////////////////  

  // get actual time
  previous = millis();

  // check connectivity
  status =  WIFI_PRO.isConnected();

  // Check if module is connected
  if (status == true)
  {    
    USB.print(F("2. WiFi is connected OK"));
    USB.print(F(" Time(ms):"));    
    USB.println(millis()-previous);
  }
  else
  {
    USB.print(F("2. WiFi is connected ERROR")); 
    USB.print(F(" Time(ms):"));    
    USB.println(millis()-previous); 
  }



  //////////////////////////////////////////////////
  // 3. NTP server
  //////////////////////////////////////////////////  

  // Check if module is connected
  if (status == true)
  {   

    // 3.1. Set NTP Server (option1)
    error = WIFI_PRO.setTimeServer(1, SERVER1);

    // check response
    if (error == 0)
    {
      USB.println(F("3.1. Time Server1 set OK"));   
    }
    else
    {
      USB.println(F("3.1. Error calling 'setTimeServer' function"));
      WIFI_PRO.printErrorCode();
      status = false;   
    }
    
    
    // 3.2. Set NTP Server (option2)
    error = WIFI_PRO.setTimeServer(2, SERVER2);

    // check response
    if (error == 0)
    {
      USB.println(F("3.2. Time Server2 set OK"));   
    }
    else
    {
      USB.println(F("3.2. Error calling 'setTimeServer' function"));
      WIFI_PRO.printErrorCode();
      status = false;   
    }

    // 3.3. Enabled/Disable Time Sync
    if (status == true)
    { 
      error = WIFI_PRO.timeActivationFlag(true);

      // check response
      if( error == 0 )
      {
        USB.println(F("3.3. Network Time-of-Day Activation Flag set OK"));   
      }
      else
      {
        USB.println(F("3.3. Error calling 'timeActivationFlag' function"));
        WIFI_PRO.printErrorCode();  
        status = false;        
      } 
    }

    // 3.4. set GMT
    if (status == true)
    {     
      error = WIFI_PRO.setGMT(time_zone);

      // check response
      if (error == 0)
      {
        USB.print(F("3.4. GMT set OK to "));   
        USB.println(time_zone, DEC);
      }
      else
      {
        USB.println(F("3.4. Error calling 'setGMT' function"));
        WIFI_PRO.printErrorCode();       
      } 
    }
  }


  //////////////////////////////////////////////////
  // 4. Switch OFF
  //////////////////////////////////////////////////  
  USB.println(F("4. WiFi switched OFF\n")); 
  WIFI_PRO.OFF(socket);


  USB.println(F("-----------------------------------------------------------")); 
  USB.println(F("Once the module has the correct Time Server Settings"));
  USB.println(F("it is always possible to request for the Time and"));
  USB.println(F("synchronize it to the Waspmote's RTC")); 
  USB.println(F("-----------------------------------------------------------\n")); 
  delay(5000);
  
  // Init RTC
  RTC.ON();
  USB.print(F("Current RTC settings:"));
  USB.println(RTC.getTime());

  
}
void loop()
{
  USB.print(F("Time [Day of week, YY/MM/DD, hh:mm:ss]: "));
  USB.println(RTC.getTime());
  
  
  /////////////////////////////////////////////////////////////
  // 1. Create file according to DATE with the following format:
  // filename: [YYMMDD.TXT]
  /////////////////////////////////////////////////////////////

// get actual time
  previous = millis();
  

  //////////////////////////////////////////////////
  // 1. Switch ON
  //////////////////////////////////////////////////  
  error = WIFI_PRO.ON(socket);

  if (error == 0)
  {    
    USB.println(F("WiFi switched ON"));
  }
  else
  {
    USB.println(F("WiFi did not initialize correctly"));
  }
  ///////////////////////////////////////////
  // 2. Read sensors
  /////////////////////////////////////////// 
 status =  WIFI_PRO.isConnected();

  // check if module is connected
  if (status == true)
  {    
    USB.print(F("WiFi is connected OK"));
    USB.print(F(" Time(ms):"));    
    USB.println(millis()-previous);
 // 3.1. Open FTP session
    error = WIFI_PRO.setTimeFromWIFI();

    // check response
    if (error == 0)
    {
      USB.print(F("3. Set RTC time OK. Time:"));
      USB.println(RTC.getTime());
    }
    else
    {
      USB.println(F("3. Error calling 'setTimeFromWIFI' function"));
      WIFI_PRO.printErrorCode();
      status = false;   
    } 

  
  // Read the concentration value
  temperature = Gases.getTemperature();
  humidity = Gases.getHumidity();
  pressure = Gases.getPressure();
  float LPGVol = LPGSensor.readVoltage();         // Voltage value of the sensor
  float LPGRes = LPGSensor.readResistance();      // Resistance of the sensor
  float LPGPPM = LPGSensor.readConcentration();   // PPM value of LPG
  float vocVol = VOCSensor.readVoltage();
  float vocRes = VOCSensor.readResistance(vocVol);    // Resistance of the senso
  float vocPPM = VOCSensor.readConcentration(vocRes); // PPM value of VOC
  // Print of the results
  //sd_answer = SD.writeSD(filename,temperature,0);
  USB.print(F(" Temperature: "));
  USB.print(temperature);
  USB.println(F(" Celsius Degrees |"));

  USB.print(F(" Humidity : "));
  USB.print(humidity);
  USB.println(F(" %RH"));

  USB.print(F(" Pressure : "));
  USB.print(pressure);
  USB.println(F(" Pa"));

  USB.print(F(" VOC Sensor Voltage: "));
  USB.print(vocVol);
  USB.println(F(" V |"));

  USB.print(F("LPG Sensor Voltage: "));
  USB.print(LPGVol);
  USB.print(F(" V |"));

  USB.print(F(" VOC Sensor Resistance: "));
  USB.print(vocRes);
  USB.println(F(" Ohms |"));

  USB.print(F(" LPG Sensor Resistance: "));
  USB.print(LPGRes);
  USB.print(F(" Ohms |"));

  USB.print(F(" VOC concentration Estimated: "));
  USB.print(vocPPM);
  USB.println(F(" ppm"));

  USB.print(F(" LPG concentration Estimated: "));
  USB.print(LPGPPM);
  USB.println(F(" ppm"));

    USB.println();
    
  ///////////////////////////////////////////
  // 3. Create BINARY frame
  /////////////////////////////////////////// 
  frame.createFrame(BINARY); 
  
  frame.setID(node_ID);

  frame.addSensor(SENSOR_GASES_TC, Gases.getTemperature());
  frame.addSensor(SENSOR_GASES_HUM, Gases.getHumidity());
  frame.addSensor(SENSOR_GASES_PRES, Gases.getPressure());
  // Create new frame (ASCII)
  // Add LPG PPM value
  frame.addSensor(SENSOR_GASES_VOC, VOCSensor.readConcentration(vocRes));
  frame.addSensor(SENSOR_GASES_LPG, LPGPPM);
  // Show the frame
  frame.showFrame();

    error = WIFI_PRO.sendFrameToMeshlium( type, host, port, frame.buffer, frame.length);

    // check response
    if (error == 0)
    {
      USB.println(F("HTTP OK"));     
      USB.print(F("HTTP Time from OFF state (ms):"));    
      USB.println(millis()-previous);
    }
    else
    {
      USB.println(F("Error calling 'getURL' function"));
      WIFI_PRO.printErrorCode();
    }
  }
  
  else
  {
    USB.print(F("WiFi is connected ERROR")); 
    USB.print(F(" Time(ms):"));    
    USB.println(millis()-previous);  
  }
  


WIFI_PRO.OFF(socket);
  USB.println(F("WiFi switched OFF\n\n")); 
  delay(20000);


}
